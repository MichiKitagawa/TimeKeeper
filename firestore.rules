rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // users コレクション
    // 認証されたユーザーは、自分のユーザーIDと一致するドキュメントのみ読み書き可能
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // ドキュメント作成時、または currentLimit がまだ存在しない場合に限り currentLimit を書き込み可
      // challengeId はいつでも更新可
      allow write: if request.auth != null && request.auth.uid == userId
                   && (request.resource.data.currentLimit is number && (!exists(/databases/$(database)/documents/users/$(userId)) || !('currentLimit' in resource.data) || resource.data.currentLimit == null)
                       || !(request.resource.data.currentLimit != resource.data.currentLimit) // currentLimitの変更を通常は許可しない
                      )
                   && (request.resource.data.challengeId is string || request.resource.data.challengeId == null);
       // usersドキュメント作成時のより詳細なルール (必要であれば)
       // allow create: if request.auth != null && request.auth.uid == userId && ... ;
       // usersドキュメント更新時のより詳細なルール (上記writeでカバーしきれない場合)
       // allow update: if request.auth != null && request.auth.uid == userId && ... ;
    }

    // deposits コレクション
    match /deposits/{depositId} {
      // 認証されたユーザーは、自分のuserIdを持つドキュメントを読み取り可能
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // 認証されたユーザーは、自分のuserIdで、指定された条件でドキュメントを作成可能
      allow create: if request.auth != null
                      && request.auth.uid == request.resource.data.userId
                      && request.resource.data.refundAmount is number && request.resource.data.refundAmount > 0
                      && request.resource.data.feeRate is number && request.resource.data.feeRate >= 0 && request.resource.data.feeRate < 1
                      && request.resource.data.chargedAmount is number && request.resource.data.chargedAmount >= request.resource.data.refundAmount
                      && request.resource.data.status == 'pending'
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.updatedAt == request.time
                      && (request.resource.data.transactionId == null || request.resource.data.transactionId is string);
      // 更新と削除は現時点では許可しない (必要に応じて変更)
      allow update, delete: if false;
    }

    // challenges コレクション
    match /challenges/{challengeId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null
                      && request.auth.uid == request.resource.data.userId
                      && request.resource.data.initialLimitMinutes is number && request.resource.data.initialLimitMinutes > 0 && request.resource.data.initialLimitMinutes <= 1440
                      && request.resource.data.status == 'active'
                      && request.resource.data.startDate == request.time;
                      // currentDailyLimitMinutes と remainingDays はCloud Functionsが設定するため、ここでは検証しない
      // Cloud Functionsからの更新を許可 (currentDailyLimitMinutes, remainingDays, status, endDate のみ)
      // ユーザー自身による status や endDate の安易な変更を防ぎつつ、Functions に更新を許可する
      allow update: if request.auth != null && request.auth.uid == resource.data.userId
                    // ユーザーはステータスを completed_refund または completed_continue にのみ変更可能 (完了時)
                    && request.resource.data.status != resource.data.status
                    && (request.resource.data.status == 'completed_refund' || request.resource.data.status == 'completed_continue')
                    && resource.data.status == 'active' // active からの変更のみ
                    && onlyAllowFields(request.resource.data, resource.data, ['status', 'endDate']) // 他のフィールド変更不可
                 || (// Cloud Functions (admin SDK) からのアクセスは request.auth が null になる
                     request.auth == null &&
                     // 更新されるフィールドを制限する
                     onlyAllowFields(request.resource.data, resource.data, ['currentDailyLimitMinutes', 'remainingDays', 'status', 'endDate']) &&
                     request.resource.data.currentDailyLimitMinutes is number && request.resource.data.currentDailyLimitMinutes >= 0 &&
                     (request.resource.data.remainingDays is number && request.resource.data.remainingDays >= 0 || request.resource.data.remainingDays == null) &&
                     (request.resource.data.status is string || request.resource.data.status == null) &&
                     (request.resource.data.endDate is timestamp || request.resource.data.endDate == null)
                    );

      allow delete: if false; // 通常ユーザーによる削除は許可しない

      // 更新時に許可するフィールドをチェックするヘルパー関数
      function onlyAllowFields(requestData, resourceData, allowedFields) {
        let incomingKeys = requestData.keys();
        let currentKeys = resourceData.keys();
        // 許可されたフィールド以外の既存フィールドが変更されていないか
        // 許可されたフィールド以外の新しいフィールドが追加されていないか
        return incomingKeys.hasOnly(currentKeys.concat(allowedFields)) &&
               requestData.diff(resourceData).affectedKeys().hasOnly(allowedFields);
      }
    }

    // 他のコレクションに対するルールは、必要になった時点でここに追加していきます。
    // 例:
    // match /deposits/{depositId} {
    //   // ... depositsコレクションのルール ...
    // }
  }
} 